# -*- mode: ruby -*-
# vi: set ft=ruby :
Vagrant.configure("2") do |config|
  config.vm.define "masterNode" do |master|
   master.vm.box = "ubuntu/focal64"
   master.vm.network "private_network", ip: "192.168.33.10"
   master.vm.hostname = "masterNode"
   master.vm.provider "virtualbox" do |vb|
     vb.memory = "2048"
     vb.cpus = 2
   end
   master.vm.provision "shell", inline: <<-SHELL
      sudo -s
      apt-get update
      apt-get install -y apt-transport-https ca-certificates curl gnupg

      #install docker as container env
      sudo install -m 0755 -d /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      sudo chmod a+r /etc/apt/keyrings/docker.gpg
      echo \
        "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        "$(. /etc/os-release && echo "$UBUNTU_CODENAME")" stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      apt-get update
      sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      #install cri-dockerd
      wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.3/cri-dockerd-0.3.3.amd64.tgz
      tar -xzvf cri-dockerd-0.3.3.amd64.tgz
      cd cri-dockerd
      mkdir -p /usr/local/bin
      install -o root -g root -m 0755 cri-dockerd /usr/local/bin/cri-dockerd
      cat > /etc/systemd/system/cri-docker.service <<EOF
[Unit]
Description=CRI-compatible Docker daemon
Documentation=https://github.com/Mirantis/cri-dockerd
After=network.target cri-o.service
[Service]
ExecStart=/usr/local/bin/cri-dockerd
Restart=on-failure
RestartSec=5
[Install]
WantedBy=multi-user.target
EOF
      sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
      systemctl daemon-reload
      systemctl enable cri-docker.service
      systemctl start cri-docker.service
      #install kubectl kubelet kubeadm
      curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
      echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
      apt-get update
      apt-get install -y kubectl kubelet kubeadm
      kubeadm init --pod-network-cidr 10.244.0.0/16 --apiserver-advertise-address=192.168.33.10 --cri-socket unix:///var/run/cri-dockerd.sock
      oriJoinScript=$(kubeadm token create --print-join-command)
      fullJoinScript="$oriJoinScript--cri-socket unix:///var/run/cri-dockerd.sock"
      echo -e "$fullJoinScript" > /vagrant/join.sh
      su vagrant
      #設定kubectl 存取cluster
      mkdir -p $HOME/.kube
      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      sudo chown $(id -u):$(id -g) $HOME/.kube/config
      #設定CNI plugin calico
      kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml
      curl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml -O
      sed -i -e 's,192.168.0.0/16,10.244.0.0/16,' custom-resources.yaml
      kubectl create -f custom-resources.yaml
    SHELL
 end
  config.vm.define "worknode1" do |worknode1|
   worknode1.vm.box = "ubuntu/focal64"
   worknode1.vm.network "private_network", ip: "192.168.33.11"
   worknode1.vm.hostname = "worknode1"
   worknode1.vm.provider "virtualbox" do |vb|
     vb.memory = "2048"
     vb.cpus = 2
   end
   worknode1.vm.provision "shell", inline: <<-SHELL
   sudo -s
   apt-get update
   apt-get install -y apt-transport-https ca-certificates curl gnupg

   #install docker as container env
   sudo install -m 0755 -d /etc/apt/keyrings
   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
   sudo chmod a+r /etc/apt/keyrings/docker.gpg
   echo \
     "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
     "$(. /etc/os-release && echo "$UBUNTU_CODENAME")" stable" | \
       sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
   apt-get update
   sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
   #install cri-dockerd
   wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.3/cri-dockerd-0.3.3.amd64.tgz
   tar -xzvf cri-dockerd-0.3.3.amd64.tgz
   cd cri-dockerd
   mkdir -p /usr/local/bin
   install -o root -g root -m 0755 cri-dockerd /usr/local/bin/cri-dockerd
   cat > /etc/systemd/system/cri-docker.service <<EOF
[Unit]
Description=CRI-compatible Docker daemon
Documentation=https://github.com/Mirantis/cri-dockerd
After=network.target cri-o.service
[Service]
ExecStart=/usr/local/bin/cri-dockerd
Restart=on-failure
RestartSec=5
[Install]
WantedBy=multi-user.target
EOF
   sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
   systemctl daemon-reload
   systemctl enable cri-docker.service
   systemctl start cri-docker.service
   #install kubectl kubelet kubeadm
   curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
   echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
   apt-get update
   apt-get install -y kubectl kubelet kubeadm
   sh /vagrant/join.sh
   exit
   SHELL
 end
  config.vm.define "worknode2" do |worknode2|
   worknode2.vm.box = "ubuntu/focal64"
   worknode2.vm.network "private_network", ip: "192.168.33.12"
   worknode2.vm.hostname = "worknode2"
   worknode2.vm.provider "virtualbox" do |vb|
     vb.memory = "2048"
     vb.cpus = 2
   end
   worknode2.vm.provision "shell", inline: <<-SHELL
   sudo -s
   apt-get update
   apt-get install -y apt-transport-https ca-certificates curl gnupg

   #install docker as container env
   sudo install -m 0755 -d /etc/apt/keyrings
   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
   sudo chmod a+r /etc/apt/keyrings/docker.gpg
   echo \
     "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
     "$(. /etc/os-release && echo "$UBUNTU_CODENAME")" stable" | \
       sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
   apt-get update
   sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
   #install cri-dockerd
   wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.3/cri-dockerd-0.3.3.amd64.tgz
   tar -xzvf cri-dockerd-0.3.3.amd64.tgz
   cd cri-dockerd
   mkdir -p /usr/local/bin
   install -o root -g root -m 0755 cri-dockerd /usr/local/bin/cri-dockerd
   cat > /etc/systemd/system/cri-docker.service <<EOF
[Unit]
Description=CRI-compatible Docker daemon
Documentation=https://github.com/Mirantis/cri-dockerd
After=network.target cri-o.service
[Service]
ExecStart=/usr/local/bin/cri-dockerd
Restart=on-failure
RestartSec=5
[Install]
WantedBy=multi-user.target
EOF
   sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
   systemctl daemon-reload
   systemctl enable cri-docker.service
   systemctl start cri-docker.service
   #install kubectl kubelet kubeadm
   curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
   echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
   apt-get update
   apt-get install -y kubectl kubelet kubeadm
   sh /vagrant/join.sh
   exit
   SHELL
 end
end